<?php

/**
 * @file
 * Install file for umsg.module
 * 
 * Need to decide if we generally need to be able
 * change database name in admin, as this probably *have no reason.
 * 
 */

/**
 * Default message database name.
 * (same as in settings.php)
 */
define('UMSG_DB_NAME', 'msgdb');

define('UMSG_GENERATE_DUMMY_CONTENT', TRUE);

function umsg_install() {
  variable_set('umsg_db_name', UMSG_DB_NAME);

  db_set_active(UMSG_DB_NAME);
  $schema = umsg_schema_msgdb();
  foreach ($schema as $name => $table) {
    db_create_table($name, $table);
  }
  db_set_active();

  // Generate dummy content.
  if (UMSG_GENERATE_DUMMY_CONTENT) {
    _umsg_create_users(54, TRUE);
    // TO DO: To Generate messages using API.
    _umsg_populate_messages();
  }

  // Define default formats for date format types.
  variable_set("date_format_umsg_current_day", 'g:i a');
  variable_set("date_format_umsg_current_year", 'M d');
  variable_set("date_format_umsg_years", 'M d Y');

  variable_set('umsg_per_page', 10); // test reason
}

function _umsg_populate_messages() {
  $admin_user = user_load(1);

  // Get generated users.
  $uids = db_select('users', 'u')
          ->fields('u', array('uid'))
          ->condition('uid', $admin_user->uid, '>')
          ->execute()
          ->fetchAllAssoc('uid');

  $min_user_key = min($uids);

  $recipient_users = user_load_multiple(array_keys($uids));
  db_set_active(UMSG_DB_NAME);
  // Generate messages.
  foreach ($recipient_users as $key => $recipient_user) {

    // Prepare message data.
    $message = array();
    //$message['subject'] = 'The test subject from ' . $admin_user->name . ' to ' . $recipient_user->name;
    $message['author'] = $admin_user->uid;
    $message['subject'] = 'Test Subject ' . $key;
    $message['body'] = substr(md5(microtime()), 0, 10) . ' -- Morbi mattis ullamcorper velit. Etiam ultricies nisi vel augue. Sed fringilla mauris sit amet nibh. Suspendisse faucibus.';
    //$message['format'] = 'plain_text
    // Just create a current time for one item.
    $the_time = ($min_user_key == $key) ? time() : rand('1400327437', time());
    $message['timestamp'] = (string) $the_time;

    // Insert data.
    $mid = db_insert('message')
            ->fields($message)
            ->execute();

    // Prepare message index data.
    $message = new stdClass();
    $message->mid = $mid;

    // Thread ID is the same as the mid if it's the first message in the thread.
    if (!isset($message->thread_id)) {
      $message->thread_id = $mid;
    }

    $msg_index_args_1 = array(
      'mid' => $mid,
      'thread_id' => $message->thread_id,
      'recipient' => $admin_user->uid,
      'recipient_name' => $admin_user->name,
      'is_new' => 1,
    );

    $msg_index_args_2 = array(
      'mid' => $mid,
      'thread_id' => $message->thread_id,
      'recipient' => $recipient_user->uid,
      'recipient_name' => $recipient_user->name,
      'is_new' => 1,
    );

    $msg_index_args_3 = array(
      'mid' => $mid + 2, // Not sure about that !!!
      'thread_id' => $message->thread_id,
      'recipient' => $recipient_user->uid,
      'recipient_name' => $recipient_user->name,
      'is_new' => 1,
    );

    // Add registration to sender.
    db_insert('message_index')
            ->fields($msg_index_args_1)
            ->execute();

    // Add registration to recipient.
    db_insert('message_index')
            ->fields($msg_index_args_2)
            ->execute();

    // Add registration as reply.
//    db_insert('message_index')
//            ->fields($msg_index_args_3)
//            ->execute();
  }
  db_set_active();
}

function umsg_uninstall() {
  variable_del('umsg_db_name');
  db_set_active(UMSG_DB_NAME);
  $schema = umsg_schema_msgdb();
  foreach ($schema as $name => $table) {
    db_drop_table($name);
  }
  db_set_active();

  // Delete dummy content.
  if (UMSG_GENERATE_DUMMY_CONTENT) {
    _umsg_create_users(0, TRUE);
  }

  variable_del('umsg_db_name');

  variable_del('umsg_per_page');

  variable_del("date_format_umsg_current_day");
  variable_del("date_format_umsg_current_year");
  variable_del("date_format_umsg_years");
}

function umsg_schema_msgdb() {
  $schema['message'] = array(
    'description' => 'Base message table',
    'fields' => array(
      'mid' => array(
        'description' => 'User Message ID',
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'author' => array(
        'description' => 'UID of the author',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'subject' => array(
        'description' => 'Subject text of the message, used to have a unique subject for all thread participants',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'body' => array(
        'description' => 'Body of the message',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'timestamp' => array(
        'description' => 'Time when the message was sent',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
    ),
    'primary key' => array('mid'),
  );

  $schema['message_index'] = array(
    'description' => '{message_index} holds indexing information about messages and recipients for fast retrieval',
    'fields' => array(
      'mid' => array(
        'description' => 'User Message ID',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'thread_id' => array(
        'description' => 'Messages thread ID',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'recipient' => array(
        'description' => 'ID of the recipient user',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'recipient_name' => array(
        'description' => 'Name of the recipient user, we need it, in case user was deleted',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'is_new' => array(
        'description' => 'Whether the user has read this message',
        'type' => 'int',
        'default' => 1,
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'archived' => array(
        'description' => 'Whether the user has archived this message',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'primary key' => array('mid', 'recipient', 'recipient_name'),
    'indexes' => array(
      'list' => array('recipient', 'recipient_name', 'archived', 'is_new'),
      'messages' => array('mid', 'recipient', 'recipient_name'),
      'participants' => array('thread_id', 'recipient', 'recipient_name', 'archived'),
    ),
  );

  return $schema;
}

/**
 * Generate random users.
 *
 * @param $num
 *  Number of users to generate.
 * @param $kill
 *  Boolean that indicates if existing users should be removed first.
 */
function _umsg_create_users($num, $kill) {
  $url = parse_url($GLOBALS['base_url']);
  if ($kill) {
    $uids = db_select('users', 'u')
            ->fields('u', array('uid'))
            ->condition('uid', 1, '>')
            ->execute()
            ->fetchAllAssoc('uid');
    user_delete_multiple(array_keys($uids));
  }

  if ($num > 0) {
    $names = array();
    $i = 0;
    while (count($names) < $num) {
      ++$i;
      $name = "test_user$i";
      //$name = 'testuser' . (string) $num; // to investigate why it's broken.
      $names[$name] = '';
    }

    $roles = array(DRUPAL_AUTHENTICATED_RID);
    foreach ($names as $name => $value) {
      $edit = array(
        'uid' => NULL,
        'name' => $name,
        'pass' => 'test',
        'mail' => str_replace(' ', '', $name) . '@' . 'dummy.invalid',
        'status' => 1,
        'created' => REQUEST_TIME - mt_rand(0, 0),
        'roles' => drupal_map_assoc($roles),
        'umsg_dummy_generate' => TRUE,
      );

      user_save(drupal_anonymous_user(), $edit);
    }
  }

  $action_string = 'created';
  if ($num == 0) {
    $action_string = 'deleted';
    $num = 'All';
  }

  drupal_set_message(t('!num_users !action.', array('!num_users' => format_plural($num, '1 user', '@count users'), '!action' => $action_string)));
}
