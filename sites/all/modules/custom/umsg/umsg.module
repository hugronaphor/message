<?php

/**
 * @file
 * Main module file.
 */
/**
 * Status constant for read messages.
 */
define('PRIVATEMSG_READ', 0);
/**
 * Status constant for unread messages.
 */
define('PRIVATEMSG_UNREAD', 1);
/**
 * Show unlimited messages in a thread.
 */
define('PRIVATEMSG_UNLIMITED', 'unlimited');

/**
 * Implements hook_permission().
 */
function umsg_permission() {
  return array(
    'administer umsg settings' => array(
      'title' => t('Administer umsg'),
      'description' => t('Perform maintenance tasks for umsg'),
    ),
    'read umsg' => array(
      'title' => t('Read own user messages'),
      'description' => t('Read own user messages'),
    ),
    'read all user messages' => array(
      'title' => t('Read all user messages'),
      'description' => t('Includes messages of other users'),
    ),
    'write umsg' => array(
      'title' => t('Write new user messages'),
      'description' => t('Write new user messages'),
    ),
    'delete umsg' => array(
      'title' => t('Delete user messages'),
      'description' => t('Delete user messages'),
    ),
//    'allow disabling umsg' => array(
//      'title' => t('Allow disabling user messages'),
//      'description' => t("Allows user to disable umsg so that they can't receive or send any user messages.")
//    ),
//    'reply only umsg' => array(
//      'title' => t('Reply to user messages'),
//      'description' => t('Allows to reply to user messages but not send new ones. Note that the write new user messages permission includes replies.')
//    ),
//    'use tokens in umsg' => array(
//      'title' => t('Use tokens in user messages'),
//      'description' => t("Allows user to use available tokens when sending user messages.")
//    ),
//    'select text format for umsg' => array(
//      'title' => t('Select text format for user messages'),
//      'description' => t('Allows to choose the text format when sending user messages. Otherwise, the default is used.'),
//    ),
  );
}

/**
 * Implements hook_menu().
 */
function umsg_menu() {

  $items['messages'] = array(
    'title' => 'Messages',
    'title callback' => 'umsg_title_callback',
    'page callback' => 'umsg_list_page',
    'page arguments' => array('list'),
    'file' => 'umsg.pages.inc',
    'access callback' => 'umsg_user_access',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'user-menu',
  );
  $items['messages/list'] = array(
    'title' => 'Messages',
    'page callback' => 'umsg_list_page',
    'page arguments' => array('list'),
    'file' => 'umsg.pages.inc',
    'access callback' => 'umsg_user_access',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'menu_name' => 'user-menu',
  );
//  $items['messages/view/%privatemsg_thread'] = array(
//    // Set the third argument to TRUE so that we can show access denied instead
//    // of not found.
//    'load arguments'   => array(NULL, NULL, TRUE),
//    'title'            => 'Read message',
//    'page callback'    => 'privatemsg_view',
//    'page arguments'   => array(2),
//    'file'             => 'umsg.pages.inc',
//    'access callback'  => 'privatemsg_view_access',
//    'access arguments' => array(2),
//    'type'             => MENU_LOCAL_TASK,
//    'weight'           => -5,
//    'menu_name'        => 'user-menu',
//  );
//  $items['messages/delete/%privatemsg_thread/%privatemsg_message'] = array(
//    'title'            => 'Delete message',
//    'page callback'    => 'drupal_get_form',
//    'page arguments'   => array('privatemsg_delete', 2, 3),
//    'file'             => 'umsg.pages.inc',
//    'access callback'  => 'privatemsg_user_access',
//    'access arguments' => array('delete privatemsg'),
//    'type'             => MENU_CALLBACK,
//    'weight'           => -10,
//    'menu_name'        => 'user-menu',
//  );
//  $items['messages/new'] = array(
//    'title'            => 'Write new message',
//    'page callback'    => 'drupal_get_form',
//    'page arguments'   => array('privatemsg_new', 2, 3, NULL),
//    'file'             => 'umsg.pages.inc',
//    'access callback'  => 'privatemsg_user_access',
//    'access arguments' => array('write privatemsg'),
//    'type'             => MENU_LOCAL_ACTION,
//    'weight'           => -3,
//    'menu_name'        => 'user-menu',
//  );
//  // Auto-completes available user names & removes duplicates.
//  $items['messages/autocomplete'] = array(
//    'page callback'    => 'privatemsg_autocomplete',
//    'file'             => 'umsg.pages.inc',
//    'access callback'  => 'umsg_user_access',
//    'access arguments' => array('write umsg'),
//    'type'             => MENU_CALLBACK,
//  );
  // Admin pages.
  $items['admin/config/messaging/umsg'] = array(
    'title' => 'User message settings',
    'description' => 'Configure user messaging settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('umsg_admin_settings'),
    'file' => 'umsg.admin.inc',
    'access arguments' => array('administer umsg settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/messaging/umsg/settings'] = array(
    'title' => 'User message settings',
    'description' => 'Configure user messaging settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('umsg_admin_settings'),
    'file' => 'umsg.admin.inc',
    'access arguments' => array('administer umsg settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

function umsg_preprocess_html(&$vars) {
  
}

/**
 * Wrapper for user_access.
 *
 * Never allows anonymous user access.
 *
 * @param $permission
 *   Permission string, defaults to read privatemsg
 *
 * @return
 *   TRUE if user has access, FALSE if not
 *
 * @ingroup api
 */
function umsg_user_access($permission = 'read privatemsg', $account = NULL) {
  if ($account === NULL) {
    global $user;
    $account = $user;
  }

  // Disallow anonymous access, regardless of permissions
  if (!$account->uid) {
    return FALSE;
  }

  if (!user_access($permission, $account)) {
    return FALSE;
  }
  return TRUE;
}

function umsg_title_callback($title = NULL) {
  $count = umsg_unread_count();

  if ($count > 0) {
    return t('Messages (@count new)', array('@count' => $count));
  }
  return t('Messages');
}

/**
 * Return number of unread messages for an account.
 *
 * @param $account
 *   Specify the user for which the unread count should be loaded.
 *
 * @ingroup api
 */
function umsg_unread_count($account = NULL) {

  return 2;

  $counts = &drupal_static(__FUNCTION__, array());
  if (!$account || $account->uid == 0) {
    global $user;
    $account = $user;
  }
  if (!isset($counts[$account->uid])) {
    $counts[$account->uid] = _privatemsg_assemble_query('unread_count', $account)
            ->execute()
            ->fetchField();
  }
  return $counts[$account->uid];
}

/**
 * Formats all rows (#options) in the message tableselect thread list.
 *
 * Uses @link theming theme patterns @endlink to theme single fields.
 *
 * @param $thread
 *   Array with the row data returned by the database.
 * @return
 *   Row definition for use with theme('table')
 */
function _umsg_list_thread($tableselect) {
  foreach ($tableselect['#options'] as $id => $thread) {
    $row = array();
    if (!empty($thread['is_new'])) {
      // Set the css class in the tr tag.
      $row['#attributes']['class'][] = 'umsg-unread';
    }

    foreach ($thread as $key => $data) {
      //dsm('umsg_list_field__' . $key);
      // First, try to load a specific theme for that field, if not present, use the default.
      if ($return = theme('umsg_list_field__' . $key, array('thread' => $thread))) {
        $row[$key] = $return;
      }
    }

    $row[$key] = $return;

    $tableselect['#options'][$id] = $row;

    ///dsm($tableselect);
  }
  return $tableselect;
}

function umsg_theme() {
  $templates = array(
//    'umsg_view'    => array(
//      'variables'        => array('message' => NULL),
//      'template'         => variable_get('umsg_message_view_template', 'umsg-view'), // 'umsg',
//    ),
//    'umsg_from'    => array(
//      'variables'        => array('author' => NULL),
//      'template'         => 'umsg-from',
//    ),
//    'umsg_recipients' => array(
//      'variables'        => array('message' => NULL),
//      'template'         => 'umsg-recipients',
//    ),
//    'umsg_between' => array(
//      'variables'        => array('recipients' => NULL),
//      'template'         => 'umsg-between',
//    ),
    // Define pattern for header/field templates. The theme system will register all
    // theme functions that start with the defined pattern.
//    'umsg_list_header'  => array(
//      'file'                  => 'umsg.theme.inc',
//      'path'                  => drupal_get_path('module', 'umsg'),
//      'pattern'               => 'umsg_list_header__',
//      'variables'             => array(),
//    ),
    'umsg_list_field' => array(
      'file' => 'umsg.theme.inc',
      'path' => drupal_get_path('module', 'umsg'),
      'pattern' => 'umsg_list_field__',
      'variables' => array('thread' => array()),
    ),
//    'umsg_new_block'  => array(
//      'file'                  => 'umsg.theme.inc',
//      'path'                  => drupal_get_path('module', 'umsg'),
//      'variables'             => array('count'),
//    ),
//    'umsg_username'  => array(
//      'file'                  => 'umsg.theme.inc',
//      'path'                  => drupal_get_path('module', 'umsg'),
//      'variables'             => array('recipient' => NULL, 'options' => array()),
//    ),
  );
  // Include the theme file to load the theme suggestions.
  module_load_include('inc', 'umsg', 'umsg.theme');
  $templates += drupal_find_theme_functions($templates, array('theme'));
  return $templates;
}

/**
 * Formats a timestamp according to the defines rules.
 *
 * Examples/Rules:
 *
 * Current hour: 25 min ago
 * Current day (but not within the hour): 10:30 am
 * Current year (but not on the same day): Nov 25
 * Prior years (not the current year): 11/25/08
 *
 * @param $timestamp
 *   UNIX Timestamp.
 *
 * @return
 *   The formatted date.
 */
function umsg_format_date($timestamp) {
  if ($timestamp > ((int) (REQUEST_TIME / 3600)) * 3600) {
    return t('@interval ago', array('@interval' => format_interval(abs(REQUEST_TIME - $timestamp), 1)));
  }
  if ($timestamp > ((int) (REQUEST_TIME / 86400)) * 86400) {
    return format_date($timestamp, 'umsg_current_day');
  }
  if ($timestamp > mktime(0, 0, 0, 1, 0, date('Y'))) {
    return format_date($timestamp, 'umsg_current_year');
  }
  return format_date($timestamp, 'umsg_years');
}

/**
 * Implements hook_block_info().
 */
function umsg_block_info() {
  $blocks['umsg_msg_navigation'] = array(
    'info' => t('Main Message navigation'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function umsg_block_configure($delta) {
  
}

/**
 * Implements hook_block_save().
 */
function umsg_block_save($delta, $edit = array()) {
  
}

/**
 * Implements hook_block_view().
 */
function umsg_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'umsg_msg_navigation':
      //$block['subject'] = t('Din aceeasi categorie');
      $block['content'] = _umsg_get_main_navigation();
      break;
  }
  return $block;
}

function _umsg_get_main_navigation() {
  $block = array();

  $links = array();
  if (umsg_user_access('write umsg')) {
    $links[] = l(t('Compose message'), 'messages/new');
  }
  if (umsg_user_access('read umsg') || privatemsg_user_access('read all user messages')) {
    $links[] = l(umsg_title_callback(), 'messages');
  }
  if (count($links)) {
    $block = array(
      //'subject' => t('Private messages'),
      'content' => theme('item_list', array('items' => $links)),
    );
  }
  return $block;
}
