<?php

/**
 * @file
 * Main module file.
 */
/**
 * Status constant for read messages.
 */
define('PRIVATEMSG_READ', 0);
/**
 * Status constant for unread messages.
 */
define('PRIVATEMSG_UNREAD', 1);
/**
 * Show unlimited messages in a thread.
 */
define('PRIVATEMSG_UNLIMITED', 'unlimited');

/**
 * Implements hook_permission().
 */
function umsg_permission() {
  return array(
    'administer umsg settings' => array(
      'title' => t('Administer umsg'),
      'description' => t('Perform maintenance tasks for umsg'),
    ),
    'read umsg' => array(
      'title' => t('Read own user messages'),
      'description' => t('Read own user messages'),
    ),
    'read all user messages' => array(
      'title' => t('Read all user messages'),
      'description' => t('Includes messages of other users'),
    ),
    'write umsg' => array(
      'title' => t('Write new user messages'),
      'description' => t('Write new user messages'),
    ),
    'delete umsg' => array(
      'title' => t('Delete user messages'),
      'description' => t('Delete user messages'),
    ),
//    'allow disabling umsg' => array(
//      'title' => t('Allow disabling user messages'),
//      'description' => t("Allows user to disable umsg so that they can't receive or send any user messages.")
//    ),
//    'reply only umsg' => array(
//      'title' => t('Reply to user messages'),
//      'description' => t('Allows to reply to user messages but not send new ones. Note that the write new user messages permission includes replies.')
//    ),
//    'use tokens in umsg' => array(
//      'title' => t('Use tokens in user messages'),
//      'description' => t("Allows user to use available tokens when sending user messages.")
//    ),
//    'select text format for umsg' => array(
//      'title' => t('Select text format for user messages'),
//      'description' => t('Allows to choose the text format when sending user messages. Otherwise, the default is used.'),
//    ),
  );
}

/**
 * Implements hook_menu().
 */
function umsg_menu() {

  $items['messages'] = array(
    'title' => 'Messages',
    'title callback' => 'umsg_title_callback',
    'page callback' => 'umsg_list_page',
    'page arguments' => array('list'),
    'file' => 'umsg.pages.inc',
    'access callback' => 'umsg_user_access',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'user-menu',
  );
  $items['messages/list'] = array(
    'title' => 'Messages',
    'page callback' => 'umsg_list_page',
    'page arguments' => array('list'),
    'file' => 'umsg.pages.inc',
    'access callback' => 'umsg_user_access',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'menu_name' => 'user-menu',
  );
//  $items['messages/view/%privatemsg_thread'] = array(
//    // Set the third argument to TRUE so that we can show access denied instead
//    // of not found.
//    'load arguments'   => array(NULL, NULL, TRUE),
//    'title'            => 'Read message',
//    'page callback'    => 'privatemsg_view',
//    'page arguments'   => array(2),
//    'file'             => 'umsg.pages.inc',
//    'access callback'  => 'privatemsg_view_access',
//    'access arguments' => array(2),
//    'type'             => MENU_LOCAL_TASK,
//    'weight'           => -5,
//    'menu_name'        => 'user-menu',
//  );
//  $items['messages/delete/%privatemsg_thread/%privatemsg_message'] = array(
//    'title'            => 'Delete message',
//    'page callback'    => 'drupal_get_form',
//    'page arguments'   => array('privatemsg_delete', 2, 3),
//    'file'             => 'umsg.pages.inc',
//    'access callback'  => 'privatemsg_user_access',
//    'access arguments' => array('delete privatemsg'),
//    'type'             => MENU_CALLBACK,
//    'weight'           => -10,
//    'menu_name'        => 'user-menu',
//  );
//  $items['messages/new'] = array(
//    'title'            => 'Write new message',
//    'page callback'    => 'drupal_get_form',
//    'page arguments'   => array('privatemsg_new', 2, 3, NULL),
//    'file'             => 'umsg.pages.inc',
//    'access callback'  => 'privatemsg_user_access',
//    'access arguments' => array('write privatemsg'),
//    'type'             => MENU_LOCAL_ACTION,
//    'weight'           => -3,
//    'menu_name'        => 'user-menu',
//  );
//  // Auto-completes available user names & removes duplicates.
//  $items['messages/autocomplete'] = array(
//    'page callback'    => 'privatemsg_autocomplete',
//    'file'             => 'umsg.pages.inc',
//    'access callback'  => 'privatemsg_user_access',
//    'access arguments' => array('write privatemsg'),
//    'type'             => MENU_CALLBACK,
//  );
  // Admin pages.
  $items['admin/config/messaging/umsg'] = array(
    'title' => 'User message settings',
    'description' => 'Configure user messaging settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('umsg_admin_settings'),
    'file' => 'umsg.admin.inc',
    'access arguments' => array('administer umsg settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/messaging/umsg/settings'] = array(
    'title' => 'User message settings',
    'description' => 'Configure user messaging settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('umsg_admin_settings'),
    'file' => 'umsg.admin.inc',
    'access arguments' => array('administer umsg settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

function umsg_preprocess_html(&$vars) {
  
}

/**
 * Wrapper for user_access.
 *
 * Never allows anonymous user access.
 *
 * @param $permission
 *   Permission string, defaults to read privatemsg
 *
 * @return
 *   TRUE if user has access, FALSE if not
 *
 * @ingroup api
 */
function umsg_user_access($permission = 'read privatemsg', $account = NULL) {
  if ($account === NULL) {
    global $user;
    $account = $user;
  }

  // Disallow anonymous access, regardless of permissions
  if (!$account->uid) {
    return FALSE;
  }

  if (!user_access($permission, $account)) {
    return FALSE;
  }
  return TRUE;
}

function umsg_title_callback($title = NULL) {
  $count = umsg_unread_count();

  if ($count > 0) {
    return t('Messages (@count new)', array('@count' => $count));
  }
  return t('Messages');
}

/**
 * Return number of unread messages for an account.
 *
 * @param $account
 *   Specify the user for which the unread count should be loaded.
 *
 * @ingroup api
 */
function umsg_unread_count($account = NULL) {

  return 2;

  $counts = &drupal_static(__FUNCTION__, array());
  if (!$account || $account->uid == 0) {
    global $user;
    $account = $user;
  }
  if (!isset($counts[$account->uid])) {
    $counts[$account->uid] = _privatemsg_assemble_query('unread_count', $account)
      ->execute()
      ->fetchField();
  }
  return $counts[$account->uid];
}
